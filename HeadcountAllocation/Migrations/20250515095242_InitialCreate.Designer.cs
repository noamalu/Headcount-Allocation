// <auto-generated />
using System;
using HeadcountAllocation.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HeadcountAllocation.Migrations
{
    [DbContext(typeof(DBcontext))]
    [Migration("20250515095242_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.Alert.EventDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ListenerEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ListenerEmployeeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.Alert.MessageDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeDTOEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeDTOEmployeeId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.EmployeeDTO", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("Alert")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<double>("JobPercentage")
                        .HasColumnType("float");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearExp")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.EmployeeLanguagesDTO", b =>
                {
                    b.Property<int>("LanguageTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("LanguageTypeId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeLanguages");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.EmployeeSkillsDTO", b =>
                {
                    b.Property<int>("SkillTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("SkillTypeId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeSkills");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.LanguageTypesDTO", b =>
                {
                    b.Property<int>("LanguageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageTypeId");

                    b.ToTable("LanguageTypes");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.ProjectDTO", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredHours")
                        .HasColumnType("int");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.ReasonTypesDTO", b =>
                {
                    b.Property<int>("ReasonTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReasonTypeId");

                    b.ToTable("ReasonTypes");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.RoleDTO", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<double>("JobPercentage")
                        .HasColumnType("float");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeZoneId")
                        .HasColumnType("int");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.RoleLanguagesDTO", b =>
                {
                    b.Property<int>("LanguageTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("LanguageTypeId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleLanguages");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.RoleSkillsDTO", b =>
                {
                    b.Property<int>("SkillTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("SkillTypeId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleSkills");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.SkillTypesDTO", b =>
                {
                    b.Property<int>("SkillTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SkillTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillTypeId");

                    b.ToTable("SkillTypes");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.TicketDTO", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Open")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TicketId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.TicketReasonsDTO", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("ReasonTypeId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("ReasonTypeId");

                    b.ToTable("TicketReasons");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.TimeZonesDTO", b =>
                {
                    b.Property<int>("TimeZoneId")
                        .HasColumnType("int");

                    b.Property<string>("TimeZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimeZoneId");

                    b.ToTable("TimeZones");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.Alert.EventDTO", b =>
                {
                    b.HasOne("HeadcountAllocation.DAL.DTO.EmployeeDTO", "Listener")
                        .WithMany()
                        .HasForeignKey("ListenerEmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Listener");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.Alert.MessageDTO", b =>
                {
                    b.HasOne("HeadcountAllocation.DAL.DTO.EmployeeDTO", null)
                        .WithMany("Alerts")
                        .HasForeignKey("EmployeeDTOEmployeeId");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.EmployeeLanguagesDTO", b =>
                {
                    b.HasOne("HeadcountAllocation.DAL.DTO.EmployeeDTO", null)
                        .WithMany("ForeignLanguages")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.EmployeeSkillsDTO", b =>
                {
                    b.HasOne("HeadcountAllocation.DAL.DTO.EmployeeDTO", null)
                        .WithMany("Skills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.RoleDTO", b =>
                {
                    b.HasOne("HeadcountAllocation.DAL.DTO.EmployeeDTO", null)
                        .WithMany("Roles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("HeadcountAllocation.DAL.DTO.ProjectDTO", null)
                        .WithMany("Roles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.RoleLanguagesDTO", b =>
                {
                    b.HasOne("HeadcountAllocation.DAL.DTO.RoleDTO", null)
                        .WithMany("ForeignLanguages")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.RoleSkillsDTO", b =>
                {
                    b.HasOne("HeadcountAllocation.DAL.DTO.RoleDTO", null)
                        .WithMany("Skills")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.TicketDTO", b =>
                {
                    b.HasOne("HeadcountAllocation.DAL.DTO.EmployeeDTO", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.TicketReasonsDTO", b =>
                {
                    b.HasOne("HeadcountAllocation.DAL.DTO.ReasonTypesDTO", null)
                        .WithMany()
                        .HasForeignKey("ReasonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeadcountAllocation.DAL.DTO.TicketDTO", null)
                        .WithOne("Reason")
                        .HasForeignKey("HeadcountAllocation.DAL.DTO.TicketReasonsDTO", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.EmployeeDTO", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("ForeignLanguages");

                    b.Navigation("Roles");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.ProjectDTO", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.RoleDTO", b =>
                {
                    b.Navigation("ForeignLanguages");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("HeadcountAllocation.DAL.DTO.TicketDTO", b =>
                {
                    b.Navigation("Reason")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
